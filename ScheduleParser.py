# telegram_bot_practika-
import time
from colorama import init
from telebot.types import WebAppInfo
from telebot.types import InputMediaPhoto

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
init()
from colorama import Fore, Back, Style
import telebot
from telebot import types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7965556897:AAGxa9SvRQRh1STvmqSEBQCxvw3hXAp6cPk'
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')


def handle_back_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass
    main(message)


# =======================================================================
# –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ
# =======================================================================
@bot.message_handler(commands=['start'])
def main(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏"""
    markup = types.InlineKeyboardMarkup()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    bt1 = types.InlineKeyboardButton('üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è', callback_data='navigation')
    bt2 = types.InlineKeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule')
    bt3 = types.InlineKeyboardButton('üè´–¢—Ä–∞–¥–∏—Ü–∏–∏', callback_data='traditions')
    bt4 = types.InlineKeyboardButton('üéì –°—Ç—É–¥–ª–∞–π—Ñ', callback_data='student_life')
    bt5 = types.InlineKeyboardButton('üÜò –ü–æ–º–æ—â—å', callback_data='help')
    markup.add(bt4, bt2, bt3, bt1, bt5)

    welcome_text = f"""
    <b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–ê–î–ò-–ì–ò–î!</b>

–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:

üìç <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è</b> - –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –∫–æ—Ä–ø—É—Å –∏–ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é
üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> - —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã
üè´ <b>–¢—Ä–∞–¥–∏—Ü–∏–∏</b> - –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –ú–ê–î–ò
üéì <b>–°—Ç—É–¥–ª–∞–π—Ñ</b> - –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏
üÜò <b>–ü–æ–º–æ—â—å</b> - —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</i>
"""

    bot.send_message(
        message.chat.id,
        welcome_text.strip(),
        reply_markup=markup
    )


# =======================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK-–ó–ê–ü–†–û–°–û–í (–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ)
# =======================================================================
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if call.data == 'navigation':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_text = types.KeyboardButton('üóíÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –≥–∏–¥')
        btn_video = types.KeyboardButton('üé¨ –í–∏–¥–µ–æ-–≥–∏–¥')
        btn_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn_text, btn_video, btn_back)

        bot.send_message(
            call.message.chat.id,
            "<b>üìç –†–µ–∂–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=markup
        )

    elif call.data == 'schedule':

        show_schedule_menu(call.message)

    elif call.data == 'select_group':

        ask_for_group_name(call.message)

    elif call.data == 'get_schedule':

        handle_get_schedule(call)

    elif call.data == 'back_to_schedule':

        show_schedule_menu(call.message)

    elif call.data == 'traditions':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_pamytniki = types.KeyboardButton('üóø –ü–∞–º—è—Ç–Ω–∏–∫–∏')
        btn_krik = types.KeyboardButton('üì£ –ö—Ä–∏—á–∞–ª–∫–∏')
        btn_korpysa = types.KeyboardButton('üèõÔ∏è –ö–æ—Ä–ø—É—Å–∞')
        btn_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn_pamytniki, btn_krik)
        markup.row(btn_korpysa)
        markup.row(btn_back)

        bot.send_message(
            call.message.chat.id,
            "<b>üè´ –¢—Ä–∞–¥–∏—Ü–∏–∏ –ú–ê–î–ò</b>\n\n",
            reply_markup=markup
        )

    elif call.data == 'help':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        btn_contacts = types.KeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
        btn_swyaz = types.KeyboardButton('‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
        markup.row(btn_contacts, btn_swyaz)
        markup.row(btn_back)
        bot.send_message(
            call.message.chat.id,
            "<b>üÜò –ü–æ–º–æ—â—å</b>\n\n",
            reply_markup=markup
        )

    elif call.message.text == 'üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_back_button(call.message)


# =======================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (REPLY-–ö–ù–û–ü–ö–ò)
# =======================================================================
@bot.message_handler(content_types=['text'])
def handle_reply_buttons(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Reply-–∫–Ω–æ–ø–æ–∫"""
    if message.text == 'üóíÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –≥–∏–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        btn1 = types.KeyboardButton('üè´ –£—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞')
        btn2 = types.KeyboardButton('üçΩÔ∏è –°—Ç–æ–ª–æ–≤—ã–µ')
        btn3 = types.KeyboardButton('üìñ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞')
        btn4 = types.KeyboardButton('üèõÔ∏è –ú—É–∑–µ–π')
        btn5 = types.KeyboardButton('üè¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è')
        btn_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        markup.row(btn5)
        markup.row(btn_back)

        bot.send_message(
            message.chat.id,
            "–ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, objects_text)

    if message.text == 'üé¨ –í–∏–¥–µ–æ-–≥–∏–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        btn1 = types.KeyboardButton('üè´ –£—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞')
        btn2 = types.KeyboardButton('üçΩÔ∏è –°—Ç–æ–ª–æ–≤—ã–µ')
        btn3 = types.KeyboardButton('üìñ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞')
        btn4 = types.KeyboardButton('üèõÔ∏è –ú—É–∑–µ–π')
        btn5 = types.KeyboardButton('üè¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è')
        btn_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        markup.row(btn5)
        markup.row(btn_back)

        bot.send_message(
            message.chat.id,
            "–ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, objects_video)
    if message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

        btn_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn_back)
        contacts_text = (
            "üìã <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ú–ê–î–ò</b>\n\n"
            "üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–π: 8 (499) 155-01-00\n"
            "üéì –ü—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: 8 (499) 346-01-69\n"
            "üóÇÔ∏è –û—Ç–¥–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: 8 (499) 346-01-68 –¥–æ–±. 1200\n\n"
            "üåê –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: https://madi.ru/voip.html"
        )

        bot.send_message(
            message.chat.id,
            contacts_text,
            reply_markup=markup,
            parse_mode='HTML'
        )
    if message.text == '‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
        feedback_text = (
            "üìß –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É:\n"
            "<a href=\"mailto:feedback@madi.ru\">feedback@madi.ru</a>\n\n"
            "üïí –ú—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!\n\n"
            "–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Å–µ—Ä–≤–∏—Å –ú–ê–î–ò.\n"
            "–ö–∞–∂–¥–æ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–∂–µ–Ω–æ –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª."
        )
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        kb.add(types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        bot.send_message(
            message.chat.id,
            feedback_text,
            reply_markup=kb,
            parse_mode='HTML'
        )

    if message.text == 'üóø –ü–∞–º—è—Ç–Ω–∏–∫–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.row(
            types.KeyboardButton('–°—Ç—É–¥–µ–Ω—Ç—É –∏ —É—á–∏—Ç–µ–ª—é'),
            types.KeyboardButton('–í–æ–∏–Ω–∞–º –ú–∞–¥–∏–π—Ü–∞–º')
        )
        markup.row(
            types.KeyboardButton('–ì–ê–ó-–ê–ê "–ü–æ–ª—É—Ç–æ—Ä–∫–∞"'),
        )
        markup.row(types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–º—è—Ç–Ω–∏–∫:", reply_markup=markup)
        # –°–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥ ‚Äî –≤ objects_monuments
        bot.register_next_step_handler(message, objects_monuments)
        return

    if message.text == 'üèõÔ∏è –ö–æ—Ä–ø—É—Å–∞':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.row(
            types.KeyboardButton('üèõÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å'),
            types.KeyboardButton('üè¨ –ù–æ–≤—ã–π –∫–æ—Ä–ø—É—Å')
        )
        markup.row(
            types.KeyboardButton('üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å'),
        )
        markup.row(types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å–∞:", reply_markup=markup)
        # –°–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥ ‚Äî –≤ objects_monuments
        bot.register_next_step_handler(message, objects_corpuses)
        return
    if message.text == 'üì£ –ö—Ä–∏—á–∞–ª–∫–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

        btn_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn_back)

        chant_text = (
            "–û–õ–ï! –û–õ–ê!\n"
            "–í–ü–ï–†–ï–î –ú–ê–î–ò –ú–û–°–ö–í–ê\n"
            "–ê–í–¢–û–î–û–†–û–ñ–ù–´–ô\n"
            "–ê–í–¢–û–î–û–†–û–ñ–ù–´–ô\n"
            "–ê–í–¢–û–î–û–†–û–ñ–ù–´–ô –ù–ê–í–°–ï–ì–î–ê!\n\n"
            "–ú–ê–î–ò –≠–¢–û –Ø!\n"
            "–ú–ê–î–ò –≠–¢–û –ú–´!\n"
            "–ú–ê–î–ò –≠–¢–û –õ–£–ß–®–ò–ï –õ–Æ–î–ò –°–¢–†–ê–ù–´!\n\n"
            "–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –∑–∞–ª–µ –≥–ª–∞–≤–Ω—ã–π?\n"
            "–ú-–ê-–î-–ò ‚Äî —Å–∞–º—ã–π —Å–ª–∞–≤–Ω—ã–π!\n"
            "–®—É–º–∏–º, –≥–æ—Ä–∏–º, –∏–¥—ë–º –≤–ø–µ—Ä—ë–¥ ‚Äî\n"
            "–¢–æ–ª—å–∫–æ –ú–ê–î–ò –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç!\n\n"
            "–ö—Ç–æ —à—É–º–∏—Ç –∏ –ø–æ–±–µ–∂–¥–∞–µ—Ç?\n"
            "–≠—Ç–æ –ú–ê–î–ò, –∫–∞–∂–¥—ã–π –∑–Ω–∞–µ—Ç!\n"
            "–†—É–∫–∏ –≤–≤–µ—Ä—Ö, –¥–µ—Ä–∂–∏–º —Å—Ç—Ä–æ–π ‚Äî\n"
            "–ú–ê–î–ò ‚Äî –≤ —Å–µ—Ä–¥—Ü–µ, –ú–ê–î–ò ‚Äî –±–æ–π!\n\n"
            "–≠–π, –ú–æ—Å–∫–≤–∞, –¥–µ—Ä–∂–∏—Å—å!\n"
            "–ú–ê–î–ò ‚Äî –≤—Ä—ã–≤–∞–µ—Ç—Å—è –≤–≤—ã—Å—å!"
        )

        bot.send_message(
            message.chat.id,
            chant_text,
            reply_markup=markup
        )
        bot.register_next_step_handler(message, objects_text)
        # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ—É–Ω–∫—Ü–∏—é handle_reply_buttons)

    elif message.text == 'üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_back_button(message)


# =======================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ï–ö–°–¢–û–í–´–ú –ì–ò–î–û–ú
# =======================================================================
def objects_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≥–∏–¥–∞"""
    if message.text == 'üè´ –£—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞':
        markup = types.ReplyKeyboardMarkup()
        btnKorp1 = types.KeyboardButton('üèõÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å')
        btnKorp2 = types.KeyboardButton('üè¨ –ù–æ–≤—ã–π –∫–æ—Ä–ø—É—Å')
        btnKorp3 = types.KeyboardButton('üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å')
        btnback = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        markup.add(btnKorp1)
        markup.add(btnKorp2, btnKorp3)
        markup.add(btnback)

        text = """<b>üè´ –£—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞ –ú–ê–î–ò</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–æ—Ä–ø—É—Å:
"""
        bot.send_message(message.chat.id, text, reply_markup=markup)
        bot.register_next_step_handler(message, korp_MADI_text)
    if message.text == 'üçΩÔ∏è –°—Ç–æ–ª–æ–≤—ã–µ':
        text = """–í –≥–ª–∞–≤–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ –µ—Å—Ç—å –¥–≤–µ —Å—Ç–æ–ª–æ–≤—ã–µ:
–Ω–∞ 2-–º —ç—Ç–∞–∂–µ ‚Äî –Ω–∞ 120 –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç;
–Ω–∞ 4-–º —ç—Ç–∞–∂–µ ‚Äî –Ω–∞ 130 –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç.

madi.ru
–¢–∞–∫–∂–µ –µ—Å—Ç—å —Å—Ç–æ–ª–æ–≤–∞—è –Ω–∞ 70 –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ. 
"""
        markup = types.ReplyKeyboardMarkup()
        btndining1 = types.KeyboardButton("üèõÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å")
        btndining2 = types.KeyboardButton("üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å")
        btndining3_Back = types.KeyboardButton("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btndining1, btndining2)
        markup.add(btndining3_Back)
        bot.send_message(message.chat.id, text, reply_markup=markup)
        # bot.register_next_step_handler(message, dining_rooms)

    elif message.text == 'üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_back_button(message)


def korp_MADI_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–µ–±–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"""
    if message.text in ['üèõÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å', 'üè¨ –ù–æ–≤—ã–π –∫–æ—Ä–ø—É—Å', 'üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å']:
        markup = types.ReplyKeyboardMarkup()
        bt_korp_MADI1_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(bt_korp_MADI1_back)
        bot.send_message(message.chat.id, '–ö–æ–Ω—Ç–µ–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', reply_markup=markup)

    elif message.text == 'üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_back_button(message)


# =======================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–ò–î–ï–û-–ì–ò–î–û–ú
# =======================================================================
def objects_video(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ-–≥–∏–¥–∞"""
    if message.text == 'üè´ –£—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞':
        markup = types.ReplyKeyboardMarkup()
        btnKorp1 = types.KeyboardButton('üèõÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å')
        btnKorp2 = types.KeyboardButton('üè¨ –ù–æ–≤—ã–π –∫–æ—Ä–ø—É—Å')
        btnKorp3 = types.KeyboardButton('üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å')
        btnback = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        markup.add(btnKorp1)
        markup.add(btnKorp2, btnKorp3)
        markup.add(btnback)

        text = """<b>üè´ –£—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞ –ú–ê–î–ò</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–æ—Ä–ø—É—Å:
"""
        bot.send_message(message.chat.id, text, reply_markup=markup)
        bot.register_next_step_handler(message, korp_MADI_video)

    elif message.text == 'üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_back_button(message)


def korp_MADI_video(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–µ–±–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤ (–≤–∏–¥–µ–æ-—Ä–µ–∂–∏–º)"""
    if message.text in ['üèõÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å', 'üè¨ –ù–æ–≤—ã–π –∫–æ—Ä–ø—É—Å', 'üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å']:
        markup = types.ReplyKeyboardMarkup()
        bt_korp_MADI1_back = types.KeyboardButton('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(bt_korp_MADI1_back)
        bot.send_message(message.chat.id, '–ö–æ–Ω—Ç–µ–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', reply_markup=markup)

    elif message.text == 'üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_back_button(message)


# –†–ê–ó–î–ï–õ–´ –ü–û–î –ö–ê–ñ–î–´–ô –§–†–ê–ì–ú–ï–ù–¢ –ö–û–î–ê(–ü–ò–®–ï–ú –í–ù–£–¢–†–ò "=" –î–õ–Ø –£–î–û–ë–°–¢–í–ê –ß–¢–ï–ù–ò–Ø)


# ========================================================================
# –†–ê–°–ü–ò–°–ê–ù–ò–ï (–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: –ö–∏—Ä–∏–ª–ª –¢–∏—Ö–æ–≤, –í–ª–∞–¥–∏–º–∏—Ä –ü–∞–Ω—Ñ–∏–ª–æ–≤)
# ========================================================================

# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:
# Google Chrome –≤–µ—Ä—Å–∏–∏ 138 –∏ –≤—ã—à–µ. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Ä—Å–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–µ –º–æ–∂–Ω–æ —Ç—É—Ç: chrome://settings/help
# Chromedriver –≤–µ—Ä—Å–∏–∏ –∫–∞–∫ Chrome. –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∏ —É–∫–∞–∑–∞—Ç—å
#   –ø—É—Ç—å –∫ chromedriver.exe –≤ self.service. –°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: https://googlechromelabs.github.io/chrome-for-testing/
# –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: selenium –∏ bs4


from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
import time


user_data = {}


class MadiScheduleParser:
    def __init__(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        self.service = Service(executable_path=r'C:\chromedriver-win64\chromedriver.exe')
        self.driver = webdriver.Chrome(service=self.service, options=chrome_options)

    def __del__(self):
        if hasattr(self, 'driver'):
            self.driver.quit()

    def get_groups(self):
        try:
            self.driver.get("https://raspisanie.madi.ru/tplan/r/?task=7")
            time.sleep(2)

            input_field = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "input#groupChoose"))
            )
            input_field.click()
            time.sleep(1)

            groups = self.driver.execute_script("""
                return Array.from(document.querySelectorAll('.comboGroup li:not(.donotshow)'))
                    .map(li => li.textContent.trim());
            """)
            return groups if groups else []

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
            return []

    def select_group(self, group_name):
        try:
            self.driver.get("https://raspisanie.madi.ru/tplan/r/?task=7")
            time.sleep(2)

            input_field = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "input#groupChoose"))
            )
            input_field.click()
            time.sleep(0.5)

            group_element = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, f"//li[contains(., '{group_name}')]"))
            )
            group_element.click()
            time.sleep(2)
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã: {e}")
            return False

    def get_weekly_schedule(self):
        try:
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "table.timetable"))
            )
            time.sleep(2)

            soup = BeautifulSoup(self.driver.page_source, 'html.parser')
            all_tables = soup.find_all('table', {'class': 'timetable'})

            schedule = {}
            current_day = None

            for table in all_tables:
                for row in table.find_all('tr'):
                    if row.th and row.th.get('colspan'):
                        current_day = row.th.text.strip()
                        schedule[current_day] = []
                        continue

                    if row.find('td') and row.find('td').get_text().strip() == '–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π':
                        continue

                    if current_day and row.find_all('td'):
                        cols = row.find_all('td')
                        if len(cols) >= 6:
                            time_col = cols[0].text.strip()
                            subject = cols[1].text.strip()
                            lesson_type = cols[2].text.strip()
                            frequency = cols[3].text.strip()
                            classroom = cols[4].text.strip()
                            teacher = cols[5].text.strip()

                            if subject and subject != '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã':
                                schedule[current_day].append({
                                    'time': time_col,
                                    'subject': subject,
                                    'type': lesson_type,
                                    'frequency': frequency,
                                    'classroom': classroom,
                                    'teacher': teacher
                                })

            return schedule

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return None


def format_schedule(schedule, group_name):
    if not schedule:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    result = []
    days_order = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']

    sorted_days = sorted(schedule.keys(),
                         key=lambda x: days_order.index(x) if x in days_order else len(days_order))

    for day in sorted_days:
        classes = schedule[day]
        if not classes:
            continue

        result.append(f"üìÖ {day} | –ì—Ä—É–ø–ø–∞ {group_name}")
        result.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

        for cls in classes:
            lesson_type = cls['type'].lower()
            if '–ª–µ–∫—Ü' in lesson_type:
                lesson_type = '–ª–µ–∫—Ü–∏—è'
            elif '–ø—Ä–∞–∫—Ç' in lesson_type or '—Å–µ–º–∏–Ω' in lesson_type:
                lesson_type = '–ø—Ä–∞–∫—Ç–∏–∫–∞'
            elif '–ª–∞–±' in lesson_type:
                lesson_type = '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è'

            frequency = cls['frequency']
            if frequency == '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ':
                freq_emoji = 'üìÖ'
            elif frequency == '–ß–∏—Å–ª–∏—Ç–µ–ª—å':
                freq_emoji = 'üî¢'
            elif frequency == '–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å':
                freq_emoji = 'üî£'
            elif '—á–∏—Å–ª' in frequency.lower():
                freq_emoji = 'üî¢'
            else:
                freq_emoji = 'üîÑ'

            classroom = cls['classroom'].strip() or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            teacher = cls['teacher'].strip() or "–Ω–µ —É–∫–∞–∑–∞–Ω"

            lesson_str = (
                f"üïí {cls['time']} | {cls['subject']} ({lesson_type})\n"
                f"üìç –ê—É–¥. {classroom} | {teacher} | {freq_emoji} {frequency}"
            )
            result.append(lesson_str)

        if day != sorted_days[-1]:
            result.append("")

    return "\n".join(result)


def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_group = types.KeyboardButton('üë• –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É')
    btn_schedule = types.KeyboardButton('üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup.add(btn_group, btn_schedule)
    return markup


def create_group_selection_menu(groups):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
    buttons = [types.KeyboardButton(group) for group in groups[:20]]
    markup.add(*buttons)
    markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    return markup


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ú–ê–î–ò.\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                     reply_markup=create_main_menu())


@bot.message_handler(func=lambda message: message.text == 'üë• –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É')
def select_group_menu(message):
    try:
        parser = MadiScheduleParser()
        groups = parser.get_groups()
        del parser

        if not groups:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        user_data[message.chat.id] = {
            'groups': groups,
            'waiting_for_group': True
        }

        bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
                         reply_markup=create_group_selection_menu(groups))

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def get_schedule_menu(message):
    if message.chat.id not in user_data or 'selected_group' not in user_data[message.chat.id]:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=create_main_menu())
        return

    send_schedule(message)


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def back_to_main_menu(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id].get('waiting_for_group', False))
def handle_group_selection(message):
    try:
        if message.text == 'üîô –ù–∞–∑–∞–¥':
            user_data[message.chat.id]['waiting_for_group'] = False
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())
            return

        if message.text not in user_data[message.chat.id]['groups']:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
            return

        user_data[message.chat.id]['selected_group'] = message.text
        user_data[message.chat.id]['waiting_for_group'] = False

        bot.send_message(message.chat.id,
                         f"‚úÖ –ì—Ä—É–ø–ø–∞ *{message.text}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
                         f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                         reply_markup=create_main_menu(),
                         parse_mode='Markdown')

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        if message.chat.id in user_data:
            del user_data[message.chat.id]


def send_schedule(message):
    try:
        if message.chat.id not in user_data or 'selected_group' not in user_data[message.chat.id]:
            return

        group_name = user_data[message.chat.id]['selected_group']
        msg = bot.send_message(message.chat.id, f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã *{group_name}*...")

        parser = MadiScheduleParser()
        if parser.select_group(group_name):
            schedule = parser.get_weekly_schedule()
            if schedule:
                formatted = format_schedule(schedule, group_name)
                bot.delete_message(message.chat.id, msg.message_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='get_schedule'))

                max_length = 4000
                parts = [formatted[i:i + max_length] for i in range(0, len(formatted), max_length)]
                for part in parts[:-1]:
                    bot.send_message(message.chat.id, part, parse_mode='Markdown')

                # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
                bot.send_message(
                    message.chat.id,
                    parts[-1],
                    parse_mode='Markdown',
                    reply_markup=markup
                )
            else:
                bot.edit_message_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    message.chat.id,
                    msg.message_id
                )
        else:
            bot.edit_message_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                message.chat.id,
                msg.message_id
            )
        del parser

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def show_schedule_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_group = types.InlineKeyboardButton('üë• –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É', callback_data='select_group')
    btn_schedule = types.InlineKeyboardButton('üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='get_schedule')
    markup.add(btn_group, btn_schedule)

    schedule_text = """
<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ú–ê–î–ò</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
- –í—ã–±—Ä–∞—Ç—å —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É
- –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    try:
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=schedule_text.strip(),
            reply_markup=markup,
            parse_mode='HTML'
        )
    except:
        bot.send_message(
            message.chat.id,
            schedule_text.strip(),
            reply_markup=markup,
            parse_mode='HTML'
        )


def ask_for_group_name(message):
    """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã"""
    msg = bot.send_message(
        message.chat.id,
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:",
        reply_markup=types.ForceReply(selective=True)
    )
    bot.register_next_step_handler(msg, process_group_name)


def process_group_name(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    group_name = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
    if 'chat.id' not in user_data:
        user_data[message.chat.id] = {}
    user_data[message.chat.id]['selected_group'] = group_name

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='select_group'),
        types.InlineKeyboardButton('üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='get_schedule')
    )

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{group_name}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
        reply_markup=markup,
        parse_mode='HTML'
    )


def handle_get_schedule(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if call.message.chat.id not in user_data or 'selected_group' not in user_data[call.message.chat.id]:
            bot.answer_callback_query(
                call.id,
                "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã",
                show_alert=True
            )
            return

        group_name = user_data[call.message.chat.id]['selected_group']
        msg = bot.send_message(call.message.chat.id, f"‚è≥ –ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}...")

        parser = MadiScheduleParser()
        if parser.select_group(group_name):
            schedule = parser.get_weekly_schedule()
            if schedule:
                formatted = format_schedule(schedule, group_name)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='get_schedule'))

                max_length = 4000
                parts = [formatted[i:i + max_length] for i in range(0, len(formatted), max_length)]
                for part in parts[:-1]:
                    bot.send_message(call.message.chat.id, part, parse_mode='Markdown')

                # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–æ–π
                bot.send_message(
                    call.message.chat.id,
                    parts[-1],
                    parse_mode='Markdown',
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    call.message.chat.id,
                    "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton('üë• –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É', callback_data='select_group')
                    )
                )
        else:
            bot.send_message(
                call.message.chat.id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='get_schedule')
                )
            )
        del parser

    except Exception as e:
        bot.answer_callback_query(
            call.id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
            show_alert=True
        )
# ========================================================================
# –ù–ê–í–ò–ì–ê–¶–ò–Ø(–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: –†–µ–∑–Ω–∏–∫ –ò–≥–æ—Ä—å, –¶–∞–ø–∫–æ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞)
# ========================================================================


# ========================================================================
# –°–¢–£–î–ï–ù–ß–ï–°–°–ö–ê–Ø –ñ–ò–ó–ù–¨(–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: –†–µ–∑–Ω–∏–∫ –ò–≥–æ—Ä—å, –¶–∞–ø–∫–æ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞)
# ========================================================================


# ========================================================================
# –¢–†–ê–î–ò–¶–ò–ò(–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ü–æ–ª–∏–µ–Ω–∫–æ –î–∞–Ω–∏–∏–ª)
# ========================================================================


# ========================================================================
# –ü–û–ú–û–©–¨(–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ü–æ–ª–∏–µ–Ω–∫–æ –î–∞–Ω–∏–∏–ª)
# ========================================================================


# =======================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =======================================================================


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ')
    bot.polling(none_stop=True)